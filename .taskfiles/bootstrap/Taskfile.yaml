---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    dotenv: ['{{.BOOTSTRAP_DIR}}/.cluster.env']
    cmds:
      - for: { var: TALOS_NODES }
        cmd: >
          sops exec-file --input-type yaml --output-type yaml {{.ITEM}} "minijinja-cli {}"
          | talosctl --nodes {{base .ITEM | replace ".sops.yaml.j2" ""}} apply-config --insecure --file /dev/stdin
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      TALOS_NODES:
        sh: ls {{.BOOTSTRAP_DIR}}/talos/*.j2
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq minijinja-cli sops talosctl

  apps:
    desc: Bootstrap Apps [CLUSTER=main] [ROOK_DISK=required]
    summary: |
      IMPORTANT: All nodes will be used for OSDs and ROOK_DISK must be set to a value that matches the disk model on all nodes (e.g. Micron_7450)
    prompt: Bootstrap apps into the Talos cluster?
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op run --env-file {{.BOOTSTRAP_DIR}}/apps/.secrets.env --no-masking -- minijinja-cli {{.BOOTSTRAP_DIR}}/apps/templates/resources.yaml.j2 | kubectl apply --server-side --filename -
      - helmfile --quiet --file {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - for: ['prometheus-operator-crds', 'wipe-rook']
        cmd: helmfile --quiet --file {{.KUBERNETES_DIR}}/bootstrap/apps/helmfile.yaml destroy --selector name={{.ITEM}}
    env:
      NODE_COUNT:
        sh: talosctl config info --output json | jq --raw-output '.nodes | length'
      ROOK_DISK: '{{.ROOK_DISK}}'
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}kubernetes-{{.CLUSTER}}{{end}}' # ¯\_(ツ)_/¯
    requires:
      vars: [CLUSTER, ROOK_DISK]
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml
      - test -f {{.BOOTSTRAP_DIR}}/apps/templates/resources.yaml.j2
      - test -f {{.BOOTSTRAP_DIR}}/apps/templates/wipe-rook.yaml.gotmpl
      - which curl jq helmfile kubectl op talosctl
