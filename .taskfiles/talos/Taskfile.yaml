---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:
  apply-node:
    desc: Apply Talos config to a node [CLUSTER=main] [NODE=required] [MODE=auto]
    cmd: |-
      minijinja-cli {{.TALOS_DIR}}/machineconfig.yaml.j2 | op inject \
        | talosctl --nodes {{.NODE}} apply-config \
          --mode {{.MODE}} \
          --config-patch @{{.TALOS_DIR}}/nodes/{{.NODE}}.yaml.j2 \
          --file /dev/stdin {{if .INSECURE}}--insecure{{end}} \
          --talosconfig {{.TALOS_DIR}}/talosconfig
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig --nodes {{.NODE}} get machineconfig &> /dev/null || echo true
    env:
      TALOS_SCHEMATIC:
        sh: |-
          curl --silent -X POST --data-binary @{{.TALOS_DIR}}/schematic.yaml https://factory.talos.dev/schematics \
            | jq --raw-output '.id'
      IS_CONTROLPLANE:
        sh: |-
          minijinja-cli "{{ .TALOS_DIR }}/nodes/{{ .NODE }}.yaml.j2" | yq -e 'select(.machine) | (.machine.type == "controlplane") // ""'
    requires:
      vars: [CLUSTER, NODE]
    preconditions:
      - op whoami
      - talosctl config info --talosconfig {{.TALOS_DIR}}/talosconfig
      - test -f {{.TALOS_DIR}}/machineconfig.yaml.j2
      - test -f {{.TALOS_DIR}}/nodes/{{.NODE}}.yaml.j2
      - test -f {{.TALOS_DIR}}/schematic.yaml
      - which curl jq minijinja-cli op talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.NODE}} upgrade-k8s --to {{ .VERSION }}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    requires:
        vars: [VERSION]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [IP=required] [MODE=powercycle]
    cmd: talosctl --nodes {{.IP}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl shutdown --nodes {{.NODES}} --force
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [IP=required]
    prompt: Reset Talos node '{{.IP}}' ... continue?
    cmd: talosctl reset --nodes {{.IP}} --graceful=false
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  generate-kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.NODE}} --force --force-context-name main {{.ROOT_DIR}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  generate-schematic:
    desc: Generate the Schematic ID for a Talos cluster [VERSION=required]
    cmd: |
      SCHEMATIC=$(curl --silent -X POST --data-binary @{{.TALOS_SCHEMATIC_FILE}} https://factory.talos.dev/schematics | jq --raw-output '.id')
      echo "${SCHEMATIC}"
      curl -o {{.TALOS_DIR}}/talos-{{.VERSION}}-${SCHEMATIC:0:8}.iso \
        "https://factory.talos.dev/image/${SCHEMATIC}/{{.VERSION}}/metal-amd64.iso"
    requires:
      vars: [VERSION, CLUSTER]
    vars:
      TALOS_SCHEMATIC_FILE: '{{.TALOS_DIR}}/{{.CLUSTER}}/schematic.yaml'
    preconditions:
      - test -f {{.TALOS_SCHEMATIC_FILE}}
      - which curl jq
