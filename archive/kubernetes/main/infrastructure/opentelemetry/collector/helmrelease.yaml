---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: otel-collector
spec:
  interval: 15m
  chart:
    spec:
      chart: opentelemetry-collector
      version: 0.90.1
      sourceRef:
        kind: HelmRepository
        name: opentelemetry
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    mode: daemonset
    annotations:
      configmap.reloader.stakater.com/reload: otel-collector-opentelemetry-collector-agent
    image:
      repository: otel/opentelemetry-collector-k8s
    presets:
      logsCollection:
        enabled: true
      kubernetesAttributes:
        enabled: true
      kubeletMetrics:
        enabled: true
      hostMetrics:
        enabled: true
    config:
      extensions:
        health_check: {}
        memory_ballast:
          size_in_percentage: 40
      processors:
        batch: {}
        memory_limiter:
          check_interval: 5s
          limit_percentage: 80
          spike_limit_percentage: 25
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318

      exporters:
        otlp/jaeger:
          endpoint: jaeger-collector:4317
          tls:
            insecure: true
        loki:
          endpoint: http://loki-write:3100/loki/api/v1/push
        prometheusremotewrite:
          endpoint: http://thanos-receive:19291/api/v1/receive
          resource_to_telemetry_conversion:
            enabled: true
          external_labels:
            exporter: opentelemetry
        # Data sources: metrics
        # prometheus:
        #   endpoint: 0.0.0.0:8889
        #   namespace: default

        # Data sources: metrics
        # prometheusremotewrite:
        #   endpoint: http://kube-prometheus-stack-prometheus.monitor.svc.cluster.local:9090/api/v1/write
          # When using the official Prometheus (running via Docker)
          # endpoint: 'http://prometheus:9090/api/v1/write', add:
          # tls:
          #   insecure: true

        # Data sources: traces
        # zipkin:
        #   endpoint: http://tempo-distributor.trace.svc.cluster.local:9411/api/v2/spans

      service:
        pipelines:
          traces:
            receivers: [otlp, zipkin]
            processors: [memory_limiter, batch]
            exporters: [otlp, debug]
          metrics:
            receivers: [otlp]
            processors: [memory_limiter, batch]
            exporters: [prometheusremotewrite]
          logs:
            receivers: [otlp]
            processors: [memory_limiter, batch]
            exporters: [otlphttp, debug]
    service:
      enabled: true
      type: ClusterIP
