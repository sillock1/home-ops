apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: agent
spec:
  mode: daemonset
  volumes:
    - name: hostfs
      hostPath:
        path: /
    - name: varlogpods
      hostPath:
        path: /var/log/pods
  volumeMounts:
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
  resources:
    requests:
      cpu: 5m
      memory: 50Mi
    limits:
      cpu: 500m
      memory: 500Mi
  securityContext:
    runAsUser: 0
  config: |
    receivers:
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          # Exclude logs from all containers named otel-collector
          - /var/log/pods/*/otel-collector/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          - type: recombine
            id: crio-recombine
            output: extract_metadata_from_filepath
            combine_field: attributes.log
            source_identifier: attributes["log.file.path"]
            is_last_entry: "attributes.logtag == 'F'"
            combine_with: ""
            max_log_size: 102400
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: recombine
            id: containerd-recombine
            output: extract_metadata_from_filepath
            combine_field: attributes.log
            source_identifier: attributes["log.file.path"]
            is_last_entry: "attributes.logtag == 'F'"
            combine_with: ""
            max_log_size: 102400
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
          - type: move
            from: attributes.log
            to: body
      hostmetrics:
        root_path: /hostfs
        collection_interval: 30s
        scrapers:
          cpu:
          load:
          memory:
          disk:
          filesystem:
          network:
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 10s
        endpoint: https://$${K8S_NODE_NAME}.pill.ac:10250
        insecure_skip_verify: true
        extra_metadata_labels:
          - container.id
          - k8s.volume.type
        metric_groups:
          - node
          - pod
          - volume
          - container
      otlp:
        protocols:
          grpc:
            endpoint: :4317
          http:
            endpoint: :4318
    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800
      k8sattributes:
        auth_type: 'serviceAccount'
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: container.id
        - sources:
          - from: connection
        extract:
          metadata:
            - "k8s.pod.name"
            - "k8s.pod.uid"
            - "k8s.deployment.name"
            - "k8s.node.name"
            - "k8s.namespace.name"
            - "k8s.pod.start_time"
            - "k8s.replicaset.name"
            - "k8s.replicaset.uid"
            - "k8s.daemonset.name"
            - "k8s.daemonset.uid"
            - "k8s.job.name"
            - "k8s.job.uid"
            - "k8s.cronjob.name"
            - "k8s.statefulset.name"
            - "k8s.statefulset.uid"
            - "k8s.container.name"
            - "container.image.name"
            - "container.image.tag"
            - "container.id"
            - "k8s.cluster.uid"
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      attributes:
        actions:
          - action: insert
            key: loki.attribute.labels
            value: log.file.name, event.domain, service.name
          - action: insert
            key: loki.format
            value: logfmt
          - action: insert
            key: loki.resource.labels
            value: pod, namespace, container, cluster, filename, service.name
    exporters:
      otlphttp/jaeger:
        endpoint: http://jaeger-collector:4138
      logging:
      loki:
        endpoint: http://loki-write:3100/loki/api/v1/push
      prometheusremotewrite:
        endpoint: http://thanos-receive:19291/api/v1/receive
        resource_to_telemetry_conversion:
          enabled: true
        external_labels:
          exporter: opentelemetry
    extensions:
      health_check: {}
      memory_ballast:
        size_in_percentage: 40
    service:
      extensions:
      - health_check
      - memory_ballast
      pipelines:
        logs:
          exporters:
          - logging
          - loki
          processors:
          - k8sattributes
          - memory_limiter
          - batch
          - attributes
          receivers:
          - filelog
          - otlp
        metrics:
          exporters:
          - prometheusremotewrite
          processors:
          - k8sattributes
          - memory_limiter
          receivers:
          - hostmetrics
          - kubeletstats
          - otlp
        traces:
          exporters:
          - otlphttp/jaeger
          processors:
          - k8sattributes
          - memory_limiter
          - batch
          receivers:
          - otlp
      telemetry:
        logs:
          level: "info"
        metrics:
          address: 0.0.0.0:8888
